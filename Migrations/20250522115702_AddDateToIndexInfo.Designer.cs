// <auto-generated />
using System;
using Gruppe3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gruppe3.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250522115702_AddDateToIndexInfo")]
    partial class AddDateToIndexInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Gruppe3.Models.ColorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Blue")
                        .HasColumnType("REAL");

                    b.Property<float>("Green")
                        .HasColumnType("REAL");

                    b.Property<float>("Red")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ColorInfos");
                });

            modelBuilder.Entity("Gruppe3.Models.DateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DateInfos");
                });

            modelBuilder.Entity("Gruppe3.Models.IndexInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ColorInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ColorInfoId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IndexDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorInfoId");

                    b.HasIndex("ColorInfoId1");

                    b.ToTable("IndexInfos");
                });

            modelBuilder.Entity("Gruppe3.Models.PlantInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("InSeason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndexInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IndexInfoId");

                    b.ToTable("PlantInfo");
                });

            modelBuilder.Entity("Gruppe3.Models.PollenRegistering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeOfPollen")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PollenRegisterings");
                });

            modelBuilder.Entity("Gruppe3.Models.PollenResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DateInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DateInfoId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlantInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DateInfoId");

                    b.HasIndex("DateInfoId1");

                    b.HasIndex("PlantInfoId");

                    b.ToTable("PollenResponses");
                });

            modelBuilder.Entity("Gruppe3.Models.IndexInfo", b =>
                {
                    b.HasOne("Gruppe3.Models.ColorInfo", "ColorInfo")
                        .WithMany()
                        .HasForeignKey("ColorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gruppe3.Models.ColorInfo", null)
                        .WithMany("IndexInfos")
                        .HasForeignKey("ColorInfoId1");

                    b.Navigation("ColorInfo");
                });

            modelBuilder.Entity("Gruppe3.Models.PlantInfo", b =>
                {
                    b.HasOne("Gruppe3.Models.IndexInfo", "IndexInfo")
                        .WithMany("PlantInfos")
                        .HasForeignKey("IndexInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndexInfo");
                });

            modelBuilder.Entity("Gruppe3.Models.PollenResponse", b =>
                {
                    b.HasOne("Gruppe3.Models.DateInfo", "DateInfo")
                        .WithMany()
                        .HasForeignKey("DateInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gruppe3.Models.DateInfo", null)
                        .WithMany("PollenResponses")
                        .HasForeignKey("DateInfoId1");

                    b.HasOne("Gruppe3.Models.PlantInfo", "PlantInfo")
                        .WithMany("PollenResponses")
                        .HasForeignKey("PlantInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateInfo");

                    b.Navigation("PlantInfo");
                });

            modelBuilder.Entity("Gruppe3.Models.ColorInfo", b =>
                {
                    b.Navigation("IndexInfos");
                });

            modelBuilder.Entity("Gruppe3.Models.DateInfo", b =>
                {
                    b.Navigation("PollenResponses");
                });

            modelBuilder.Entity("Gruppe3.Models.IndexInfo", b =>
                {
                    b.Navigation("PlantInfos");
                });

            modelBuilder.Entity("Gruppe3.Models.PlantInfo", b =>
                {
                    b.Navigation("PollenResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
